@inject ISyncLocalStorageService LocalStorage;
@inject ICartService CartService;
@inject IProductService ProductService;
@inject NavigationManager NavigationManager;
@implements IDisposable;

<BlazoredTypeahead SearchMethod="@SearchProductsAsync"
                   TValue="Product"
                   TItem="Product"
                   Value="_selectedProduct"
                   ValueChanged="HandleSearch"
                   ValueExpression="@(() => _selectedProduct)"
                   placeholder="Поиск...">
    <SelectedTemplate>
        @context?.Title
    </SelectedTemplate>
    <ResultTemplate>
        @context?.Title
    </ResultTemplate>
    <NotFoundTemplate>
        Извините, по данному запросу продукты не найдены!
    </NotFoundTemplate>
</BlazoredTypeahead>
<a href="cart" class="btn btn-info">
    <i class="oi oi-cart"></i>
        Корзина    
    <span class="badge border border-light rounded-circle bg-light text-black">@GetProductCount()</span>
</a>

@code {
    private Product? _selectedProduct;

    protected override void OnInitialized()
    {
        CartService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        CartService.OnChange -= StateHasChanged;
    }

    private int GetProductCount()
    {
        var cart = LocalStorage.GetItem<List<ProductVariant>>("cart");
        return cart != null ? cart.Count : 0;
    }

    private void HandleSearch(Product product)
    {
        if (product == null)
        {
            return;
        }

        _selectedProduct = product;
        NavigationManager.NavigateTo($"/{_selectedProduct.Id}");
    }

    private async Task<IEnumerable<Product>?> SearchProductsAsync(string searchText)
    {
        return await ProductService.SearchProductsAsync(searchText);
    }
}

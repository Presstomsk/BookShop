@inject IProductService ProductService;
@implements IDisposable;

<ul class="list-unstyled">
    @foreach (var product in ProductService?.Products != null ? ProductService.Products : new List<Product>())
    {
        <li class="card mb-3">
            <div class="row g-0">
                <div class="col-md-4 media-img-wrapper">
                    <a href="/@product.Id">
                        <img class="media-img" src="@product.Image" alt="@product.Title"/>
                    </a>
                </div>
                <div class="col-md-8">
                    <div class="card-body">
                        <a href="/@product.Id">
                            <h5 class="card-title">@product.Title</h5>
                        </a>
                        <p class="card-text">@product.Description</p>                       
                        <h5 class="price">
                            @GetPriceText(product)
                        </h5>
                    </div>
                </div>
            </div>
        </li>        
    }
</ul>

@code {

    protected override void OnInitialized()
    {
        ProductService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.OnChange -= StateHasChanged;
    }

    private string GetPriceText(Product product)
    {
        var variants = product.Variants;

        if (variants.Count == 0)
        {
            return string.Empty;
        }
        else if (variants.Count == 1)
        {
            return $"${variants[0].Price}";
        }

        decimal minPrice = variants.Min(v => v.Price);

        return $"Цена от ${minPrice}";
    }
}

@page "/login"

@inject ILocalStorageService LocalStorage;
@inject IAuthService AuthService;
@inject IToastService ToastService;
@inject AbstractValidator<ILoginModel> Validator;
@inject NavigationManager NavigationManager;
@inject AuthenticationStateProvider AuthStateProvider;
@inject IStatsService StatsService;

<AuthorizeView>
    <Authorized>
        @{
            NavigationManager.NavigateTo("");
        }
    </Authorized>
</AuthorizeView>

<h3>Вход</h3>
<EditForm Model="_user" OnSubmit="HandleLogin">
    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="_user.Email" type="email" class="form-control" />
    </div><br />
    <div class="form-group">
        <label for="password">Пароль</label>
        <InputText id="password" @bind-Value="_user.Password" type="password" class="form-control" />
    </div><br />
    <button type="submit" class="btn btn-primary" disabled="@isDisabled">Войти</button>
</EditForm>

@code {
    private LoginModel _user = new LoginModel();
    bool isDisabled = false;

    private async void HandleLogin()
    {
        isDisabled = true;
        var validateResult = Validator.Validate(_user);
        if (validateResult.IsValid)
        {
            var loginResult = await AuthService.LoginAsync(_user);

            if (loginResult?.Success ?? false)
            {
                await LocalStorage.SetItemAsync<string>("token", loginResult.Token!);
                await AuthStateProvider.GetAuthenticationStateAsync();
                isDisabled = false;
                NavigationManager.NavigateTo("");
            }
            else
            {
                isDisabled = false;
                ToastService.ShowError(loginResult?.Message ?? StringConsts.AUTH_ERROR);
            }
        }
        else
        {
            isDisabled = false;
            ToastService.ShowError(validateResult.Errors[0].ErrorMessage);
        }
    }
}

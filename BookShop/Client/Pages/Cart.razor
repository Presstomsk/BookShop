@page "/cart"

@inject ICartService CartService;
@inject NavigationManager NavigationManager;

@if (!_isOrderPlaced)
{
    <h3>Корзина</h3>

    @if (_cartItems?.Count <= 0)
    {
        <span>В вашей корзине отсутствует товар.</span>
    }
    else
    {
        <div>
            @foreach (var item in _cartItems)
            {
                <div class="item-container">
                    <div class="item-image-wrapper"><img src="@item.Image" class="item-image" /></div>
                    <div class="item-name">
                        <h5><a href="/@item.ProductId">@item.ProductTitle</a></h5>
                        <span>@item.EditionName</span><br />
                        <button class="btn-delete" @onclick="@(() => DeleteCartItemAsync(item))">Удалить</button>
                        <EditForm Model="item">
                            <input type="number" min="1" id="quantity" @bind-value="@item.Quantity" class="form-control" style="width: 80px;" />
                        </EditForm>
                    </div>
                    <div class="item-price">$@(item.Price * item.Quantity)</div>
                </div>
            }
            <div class="item-price">
                Всего(@_cartItems.Count): $@_cartItems.Sum(item => item.Price * item.Quantity)
            </div>
            <AuthorizeView>
                <Authorized>
                    <div style="text-align: center; margin-top: 10px;">
                        <button class="btn btn-primary btn-lg" @onclick="PlaceOrderAsync">Оформить заказ</button>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <div style="text-align: center; margin-top: 10px;">
                        <span style="color: red;">Для оплаты товара необходимо пройти регистрацию.</span>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    }
}
else
{
    <h3>Спасибо за ваш заказ!</h3>
    <h5>Полный перечень товаров:</h5>
    @if (_cartItems?.Count <= 0)
    {
        <span>В вашей корзине отсутствует товар.</span>
    }
    else
    {
        <div>
            @foreach (var item in _cartItems)
            {
                <div class="item-container">
                    <div class="item-image-wrapper"><img src="@item.Image" class="item-image" /></div>
                    <div class="item-name">
                        <h5><a href="/@item.ProductId">@item.ProductTitle</a></h5>
                        <span>@item.EditionName</span><br />
                        <span>@item.Quantity шт.</span><br />
                    </div>
                    <div class="item-price">$@(item.Price * item.Quantity)</div>
                </div>
            }
            <div class="item-price">
                Всего(@_cartItems.Count): $@_cartItems.Sum(item => item.Price * item.Quantity)
            </div>            
        </div>
    }
}



@code {
    private List<CartItem> _cartItems = new List<CartItem>();
    private bool _isOrderPlaced = false;
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _cartItems = await CartService.GetCartItemsAsync();
    }

    private async Task DeleteCartItemAsync(CartItem item)
    {
        await CartService.DeleteCartItemAsync(item);
        _cartItems = await CartService.GetCartItemsAsync();
    }

    private async Task PlaceOrderAsync()
    {
        if (AuthenticationState != null)
        {
            var authState = await AuthenticationState;
            var user = authState?.User;

            if (user?.Identity != null && user.Identity.IsAuthenticated)
            {               
                var email = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
                var checkoutUrl = await CartService.CheckoutAsync(email);
                NavigationManager.NavigateTo(checkoutUrl);
                await CartService.EmptyCartAsync();
            }
        }
    }
}

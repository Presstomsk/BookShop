@page "/{id:int}"
@inject IProductService ProductService;
@inject ICartService CartService;
@inject ILocalStorageService LocalStorage;
@inject IToastService ToastService;

<div class="card mb-3 card-big">
    <div class="row g-0">
        <div class="col-md-4 media-img-big-wrapper">            
            <img class="media-img-big" src="@product?.Image" alt="@product?.Title" />           
        </div>
        <div class="col-md-8">
            <div class="card-body">               
                <h3 class="card-title">@product?.Title</h3><br/>               
                <p class="card-text">@product?.Description</p>
                @if (product?.Variants?.Count > 1)
                {
                    <div class="form-group">
                        <select class="form-control" @bind = "currentEditionId">
                            @foreach(var variant in product.Variants)
                            {
                                <option value="@variant.EditionId">@variant?.Edition?.Name</option>
                            }
                        </select>
                    </div><br/>
                }
                @if (GetSelectedVariant() != null )
                {
                    @if (GetSelectedVariant()!.OriginalPrice > GetSelectedVariant()!.Price)
                    {
                        <h6 class="text-muted original-price">$@GetSelectedVariant()!.OriginalPrice</h6>
                    }
                    <h5 class="price">
                        $@GetSelectedVariant()!.Price
                    </h5><br/>
                }
                <button class="btn btn-primary" @onclick = "AddToCartAsync"><i class="oi oi-cart"></i>&nbsp;&nbsp;&nbsp;Add to Cart</button>
            </div>
        </div>
    </div>
</div>

@code {
    private Product? product = new Product();
    private int currentEditionId = 1;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {     
        product = await ProductService.GetProductAsync(Id);    

        if (product?.Variants.Count > 0)
        {
            currentEditionId = product.Variants[0].EditionId;
        }
    }

    private ProductVariant? GetSelectedVariant()
    {
        return product?.Variants.FirstOrDefault(v => v.EditionId == currentEditionId);       
    }

    private async Task AddToCartAsync()
    {
        await CartService.AddToCartAsync(GetSelectedVariant());
    }
}


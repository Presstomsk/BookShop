@page "/administrate"

@inject IAdministrateService AdministrateService;
@inject NavigationManager NavigationManager
@inject DialogService DialogService;
@inject HttpClient Http

<AuthorizeView Roles=@Role.Administrator.ToString()>
    <Authorized>
        <h3>Продукты</h3>        
        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="true" 
                FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5"
                AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@GridData" TItem="ExtendedProduct" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or"
                SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedExtendedProduct>
            <Columns>  
                <RadzenDataGridColumn TItem="ExtendedProduct" Property="Image" Title="Изображение" Frozen="true" Width="160px" TextAlign="TextAlign.Center">
                    <Template Context="data">
                        <RadzenImage Path="@data.Image" Style="height: 100px;"/>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ExtendedProduct" Property="Title" Title="Название" Frozen="true" Width="160px" TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn TItem="ExtendedProduct" Property="Description" Title="Описание" Width="160px" />
                <RadzenDataGridColumn TItem="ExtendedProduct" Property="CategoryName" Title="Категория" Width="160px" />
                <RadzenDataGridColumn TItem="ExtendedProduct" Property="EditionName" Title="Вариант" Width="160px" />
                <RadzenDataGridColumn TItem="ExtendedProduct" Property="OriginalPrice" Title="Цена" Width="160px" />
                <RadzenDataGridColumn TItem="ExtendedProduct" Property="Price" Title="Скидочная цена" Width="160px" />
                <RadzenDataGridColumn TItem="ExtendedProduct" Property="DateCreated" Title="Дата публикации" FormatString="{0:d}" Width="160px" />
                <RadzenDataGridColumn TItem="ExtendedProduct" Property="DateUpdated" Title="Дата обновления" FormatString="{0:d}" Width="160px" />
                <RadzenDataGridColumn TItem="ExtendedProduct" Property="Views" Title="Количество просмотров" Width="160px" />
            </Columns>
        </RadzenDataGrid><br/>
        <p>
            <RadzenButton Click="@ClearSelection" Text="Убрать выделение" ButtonStyle="ButtonStyle.Primary" />
            <RadzenButton Click=@(() => CreateProduct()) Text="Добавить" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" />
            <RadzenButton Click=@(() => UpdateProduct()) Text="Изменить" Icon="edit" ButtonStyle="ButtonStyle.Primary" />
            <RadzenButton Click=@(() => DeleteProduct()) Text="Удалить" Icon="delete" ButtonStyle="ButtonStyle.Primary" />
        </p>        
    </Authorized>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("");
        }
    </NotAuthorized>
</AuthorizeView>


@code {
    Product? productToDelete;

    public List<ExtendedProduct> GridData { get; set; } = new List<ExtendedProduct>();
    IList<ExtendedProduct>? selectedExtendedProduct;

    protected override async Task OnInitializedAsync()
    {
        var result = await AdministrateService.LoadExtendedProductsAsync();
        if (result != null)
        {
            GridData = result;
        }
    }

    void ClearSelection()
    {
        selectedExtendedProduct = null;
    }

    void UpdateProduct()
    {
        var product = selectedExtendedProduct?.First();

        if (product != null)
        {
            NavigationManager.NavigateTo($"update/{product.ProductId}/{product.EditionId}");
        }
    }

    void CreateProduct()
    {
        NavigationManager.NavigateTo($"addnew");
    }

    void DeleteProduct()
    {
        //productToDelete = product;
       
    }

    void CancelDeleteContact()
    {
        
    }

    async Task ConfirmDeleteContact()
    {
        if (productToDelete == null)
        {
            return;
        }

       
        //var result = await Http.DeleteAsync($"api/contacts/{productToDelete.Id}");
        //if (result.IsSuccessStatusCode)
        //{
        //    var jsonResult = await result.Content.ReadFromJsonAsync<List<Product>>();
        //    if (jsonResult is not null)
        //    {
        //        GridData = jsonResult;
        //    }
        //}
    }
}

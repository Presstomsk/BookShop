@page "/update/{productId:int}/{editionId:int}"

@inject NavigationManager NavigationManager;
@inject IEditionService EditionService;
@inject ICategoryService CategoryService;
@inject IAdministrateService AdministrateService;
@inject AbstractValidator<IExtendedProduct> Validator;
@inject IToastService ToastService;

<AuthorizeView Roles=@Role.Administrator.ToString()>
    <Authorized>
        <h3>Изменение продукта</h3>
        <RadzenRow Gap="1rem">
            <RadzenColumn Size="12" SizeSM="6">
                <RadzenStack>
                    <RadzenFormField Text="Название" Variant="@variant">
                        <RadzenTextBox @bind-Value="@product.Title" />
                    </RadzenFormField>
                    <RadzenFormField Text="Описание" Variant="@variant">
                        <RadzenTextArea @bind-Value="@product.Description" />
                    </RadzenFormField>
                    <RadzenFormField Text="Обложка(URL)" Variant="@variant">
                        <RadzenTextBox @bind-Value="@product.Image" />
                    </RadzenFormField>
                    <RadzenFormField Text="Категория" Variant="@variant">
                        <RadzenDropDown Data=@categories @bind-Value="@product.CategoryName" />
                    </RadzenFormField>
                    <RadzenFormField Text="Вариант" Variant="@variant">
                        <RadzenTextBox @bind-Value="@product.EditionName" ReadOnly="true" />
                    </RadzenFormField>
                    <RadzenFormField Text="Стоимость" Variant="@variant">
                        <RadzenNumeric @bind-Value="@product.OriginalPrice" />
                    </RadzenFormField>
                    <RadzenFormField Text="Стоимость с учетом скидки" Variant="@variant">
                        <RadzenNumeric @bind-Value="@product.Price" />
                    </RadzenFormField>
                    <RadzenButton Click=@(() => UpdateProductAsync()) Text="Изменить" Icon="edit" ButtonStyle="ButtonStyle.Primary" Disabled="@isDisabled" />
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
    </Authorized>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("");
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    Variant variant = Variant.Outlined;
    ExtendedProduct product = new ExtendedProduct();
    List<string> categories = new List<string>();    
    [Parameter]
    public int ProductId { get; set; }    
    [Parameter]
    public int EditionId { get; set; }
    bool isDisabled = false;


    protected override async Task OnInitializedAsync()
    { 
        await CategoryService.LoadCategoriesAsync();

        foreach (var category in CategoryService.Categories!)
        {
            categories.Add(category.Name!);
        }       

        var extendedProducts = await AdministrateService.LoadExtendedProductsAsync();
        product = extendedProducts.First(ep => ep.ProductId == ProductId
                                            && ep.EditionId == EditionId);

    }

    private async Task UpdateProductAsync()
    {
        isDisabled = true;
        var validateResult = Validator.Validate(product);

        if (validateResult.IsValid)
        {
            var result = await AdministrateService.UpdateProductAsync(product);
            if (result.Success)
            {
                isDisabled = false;
                NavigationManager.NavigateTo("/administrate");
            }
            else
            {
                isDisabled = false;
                ToastService.ShowError(result.Message!);
            }
        }
        else
        {
            isDisabled = false;
            ToastService.ShowError(validateResult.Errors[0].ErrorMessage);
        }
    }
}
